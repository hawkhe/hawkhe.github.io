<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fs on Hawk's Blog</title><link>https://hawkhe.github.io/tags/fs/</link><description>Recent content in fs on Hawk's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jul 2020 00:25:43 +0800</lastBuildDate><atom:link href="https://hawkhe.github.io/tags/fs/index.xml" rel="self" type="application/rss+xml"/><item><title>SimpleFS文件系统3: 挂载文件系统</title><link>https://hawkhe.github.io/post/simplefs_mount/</link><pubDate>Wed, 15 Jul 2020 00:25:43 +0800</pubDate><guid>https://hawkhe.github.io/post/simplefs_mount/</guid><description>内核模块加载 SimpleFS的核心功能都在内核态实现，使用前需要保证该模块已经加载到内核之中。
其入口代码实现在fs.c文件中，加载SimpleFS内核模块时，会调用到module_init函数注册的simplefs_init函数上。
module_init(simplefs_init); // 模块初始化 module_exit(simplefs_exit); // 模块退出 MODULE_LICENSE(&amp;#34;Dual BSD/GPL&amp;#34;); MODULE_AUTHOR(&amp;#34;National Cheng Kung University, Taiwan&amp;#34;); MODULE_DESCRIPTION(&amp;#34;a simple file system&amp;#34;); simplefs_init函数 simplefs_init函数是加载到内核时的入口函数，主要执行了以下功能:
simplefs_init() - simplefs_init_inode_cache() // 初始化文件系统根目录的inode - kmem_cache_create(, sizeof(struct simplefs_inode_info),...) // 申请内存 - register_filesystem(&amp;amp;simplefs_file_system_type) // 注册文件系统，并参数传入文件系统类型 注册文件系统时，传入的参数，以全局变量形式定义在fs.c中，填充了SimpleFS必要的一些信息:
static struct file_system_type simplefs_file_system_type = { .owner = THIS_MODULE, .name = &amp;#34;simplefs&amp;#34;, .mount = simplefs_mount, // 注册执行mount命令时的回调函数 .kill_sb = simplefs_kill_sb, // 注册执行umount时的回调函数 .fs_flags = FS_REQUIRES_DEV, .next = NULL, }; simplefs_mount函数 simplefs_mount函数是在注册文件系统时，作为参数传入的，当执行mount挂载一个文件系统时，会回调到该函数上来。
simplefs_mount函数中直接调用了mount_bdev()函数:</description></item><item><title>SimpleFS文件系统2: 格式化</title><link>https://hawkhe.github.io/post/simplefs_mkfs/</link><pubDate>Fri, 22 May 2020 00:25:43 +0800</pubDate><guid>https://hawkhe.github.io/post/simplefs_mkfs/</guid><description>格式化程序mkfs.c 格式化的功能在源码中的mkfs.c中实现，其main函数中的主要环节已经写好了注释:
int main(int argc, char **argv) { ... /* Open disk image */ int fd = open(argv[1], O_RDWR); ... /* Get image size */ struct stat stat_buf; int ret = fstat(fd, &amp;amp;stat_buf); ... /* Get block device size */ if ((stat_buf.st_mode &amp;amp; S_IFMT) == S_IFBLK) { long int blk_size = 0; ret = ioctl(fd, BLKGETSIZE64, &amp;amp;blk_size); // 使用ioctl获取块设备大小 ... stat_buf.st_size = blk_size; } /* Check if image is large enough */ long int min_size = 100 * SIMPLEFS_BLOCK_SIZE; // min_size = 400KB if (stat_buf.</description></item><item><title>SimpleFS文件系统1: 初次使用</title><link>https://hawkhe.github.io/post/simplefs_compile/</link><pubDate>Thu, 07 May 2020 00:25:43 +0800</pubDate><guid>https://hawkhe.github.io/post/simplefs_compile/</guid><description>动机 文件系统是经常会接触的一个概念，但是习惯于在glibc之上编写程序的时候，文件系统又像是黑盒一样，了解的知识点也比较零散。
SimpleFS是一个设计和实现都十分简单的本地文件系统，因此非常适合作为入门的，学习文件系统相关知识的工具。
编译 下载源码 [root@node-8 simplefs]# git clone https://github.com/sysprog21/simplefs.git 编译 [root@node-8 simplefs]# cd simplefs [root@node-8 simplefs]# make make -C /lib/modules/4.18.0-348.2.1.el8_5.x86_64/build M=/work/simplefs modules make[1]: Entering directory &amp;#39;/usr/src/kernels/4.18.0-348.2.1.el8_5.x86_64&amp;#39; CC [M] /work/simplefs/fs.o CC [M] /work/simplefs/super.o ... LD [M] /work/simplefs/simplefs.ko make[1]: Leaving directory &amp;#39;/usr/src/kernels/4.18.0-348.2.1.el8_5.x86_64&amp;#39; 编译的时候可能提示缺乏头文件，例如笔者CentOS-8.5上会有如下报错，
[root@node-8 simplefs]# make -j 4 cc -std=gnu99 -Wall -o mkfs.simplefs mkfs.c In file included from /usr/include/linux/ioctl.h:5, from /usr/include/asm/ioctls.h:5, from /usr/include/bits/ioctls.h:23, from /usr/include/sys/ioctl.h:26, from mkfs.c:6: /usr/include/asm/ioctl.h:5:10: fatal error: uapi/asm-generic/ioctl.h: No such file or directory #include &amp;lt;uapi/asm-generic/ioctl.</description></item></channel></rss>